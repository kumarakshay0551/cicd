name: "Platform CD"
          client-id: ${{ vars.AZURE_MI_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Create .htpasswd file
        run: echo "${{ secrets.HTPASSWD }}" | base64 --decode > $GITHUB_WORKSPACE/.htpasswd

      - name: Create Mimir, Loki, Tempo secrets
        working-directory: ./src
        run: |
          for namespace in mimir loki tempo ; do
            kubectl get namespace $namespace || kubectl create namespace $namespace
            kubectl get secret htpasswd -n $namespace || kubectl create secret generic htpasswd --from-file=$GITHUB_WORKSPACE/.htpasswd -n $namespace
          done

      - id: otelc-secret
        name: Create OTELC secrets
        env:
          KUBE_NAMESPACE: otelc
          COSMOSDB_ACCESSKEY: ${{ needs.terraform-execute.outputs.COSMOSDB_ACCESSKEY }}
          COSMOSDB_URI: ${{ needs.terraform-execute.outputs.COSMOSDB_URI }}
          emailConnectionString: ${{ secrets.EMAIL_CONNECTION_STRING }}
          GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
        run: | 
          kubectl get namespace ${{ env.KUBE_NAMESPACE }} || kubectl create namespace ${{ env.KUBE_NAMESPACE }}
          cosmoAccessKey=$(echo -n ${{ env.COSMOSDB_ACCESSKEY }} | base64 --decode)
          kubectl get secret servicemanager-secret -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic \
              servicemanager-secret -n ${{ env.KUBE_NAMESPACE }} \
              --from-literal=uri=${{ env.COSMOSDB_URI }} \
              --from-literal=accesskey=$cosmoAccessKey \
              --from-literal=grafanaAdminPassword='${{ env.GRAFANA_ADMIN_PASSWORD }}' \
              --from-literal=database=consumer \
              --from-literal=emailConnectionString='${{ env.emailConnectionString }}';
          kubectl get secret sec-azuread-auth -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic sec-azuread-auth --from-literal=CLIENT_ID="${{ vars.GRAFANA_AZURE_CLIENT_ID }}" --from-literal=CLIENT_SECRET="${{ secrets.GRAFANA_AZURE_CLIENT_SECRET }}" -n ${{ env.KUBE_NAMESPACE }}
          kubectl get secret internal-auth-token -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic internal-auth-token -n ${{ env.KUBE_NAMESPACE }} \
          --from-literal=internal-user="${{ secrets.OTELC_INTERNAL_USER }}" \
          --from-literal=self-monitoring="${{ secrets.OTELC_MONITORING_USER }}"

  create-grafana-secrets:
    name: "Create Grafana secrets"
    runs-on: ubuntu-latest
    environment: "${{ github.event.inputs.environment }}"
    needs: [setup-env, terraform-execute]
    env:
      KUBE_NAMESPACE: grafana
      POSTGRES_PASSWORD: ${{ needs.terraform-execute.outputs.POSTGRES_PASSWORD }}
      POSTGRES_FQDN: ${{ needs.terraform-execute.outputs.POSTGRES_FQDN }}
      GRAFANA_ADMIN_PASSWORD: ${{ secrets.GRAFANA_ADMIN_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - id: aks-connect
        uses: ./.github/actions/aks-connect
        with:
          client-id: ${{ vars.AZURE_MI_CLIENT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}

      - name: Install Grafana secrets
        run: |
          kubectl get namespace ${{ env.KUBE_NAMESPACE }} || kubectl create namespace ${{ env.KUBE_NAMESPACE }}
          kubectl get secret sec-login-credentials -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic sec-login-credentials --from-literal=admin-user=admin --from-literal=admin-password='${{ env.GRAFANA_ADMIN_PASSWORD }}' -n ${{ env.KUBE_NAMESPACE }}
          kubectl get secret sec-postgresq-password -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic sec-postgresq-password --from-literal=POSTGRES_PASSWORD='${{ env.POSTGRES_PASSWORD }}' --from-literal=POSTGRES_FQDN='${{ env.POSTGRES_FQDN }}:5432' -n ${{ env.KUBE_NAMESPACE }}
          kubectl get secret sec-azuread-auth -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic sec-azuread-auth --from-literal=CLIENT_ID="${{ vars.GRAFANA_AZURE_CLIENT_ID }}" --from-literal=CLIENT_SECRET="${{ secrets.GRAFANA_AZURE_CLIENT_SECRET }}" -n ${{ env.KUBE_NAMESPACE }}
          kubectl get secret sec-smtp-cred -n ${{ env.KUBE_NAMESPACE }} || kubectl create secret generic sec-smtp-cred --from-literal=user="${{ secrets.GRAFANA_SMTP_USER }}" --from-literal=password="${{ secrets.GRAFANA_SMTP_PASS }}" -n ${{ env.KUBE_NAMESPACE }}

  deploy-argocd:
    name: "Deploy ArgoCD"
    runs-on: ubuntu-latest
          kustomize build "entrypoint/overlays/${{ github.event.inputs.environment }}" | envsubst '$ENTRYPOINT_CERT $ENTRYPOINT_PRIVATE_KEY $COSMOS_DB_KEY $PUBLIC_IP_ADDRESS' | kubectl apply -f -
